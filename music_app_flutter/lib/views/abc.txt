import 'package:flutter/material.dart';
import 'package:music_app_flutter/logic/mysql.dart';
import 'package:music_app_flutter/views/song_running_view.dart';
import 'package:music_app_flutter/widgets/PlaylistUtils.dart';
import 'package:music_app_flutter/widgets/album_cards.dart';
class AlbumView extends StatefulWidget {
  final ImageProvider image;
  final String title;
  final String artist;
  final Map<String, dynamic> song;
  final List<String> playlists;
  const AlbumView({Key? key,
    required this.image,
    required this.title,
    required this.artist,
    required this.song,
    required this.playlists,
  }) : super(key: key);
  @override
  _AlbumViewState createState() => _AlbumViewState();
}
class _AlbumViewState extends State<AlbumView> {
  final Mysql db = Mysql();
  late ScrollController scrollController;
  double imageSize = 0;
  double initialSize = 240;
  double containerHeight = 500;
  double containerinitalHeight = 500;
  double imageOpacity = 1;
  bool showTopBar = false;
  List<Map<String, dynamic>> randomSongs = [];
  Map<String, dynamic> song = {};
  late List<String> playlists;
  @override
  void initState() {
    imageSize = initialSize;song = widget.song;
    scrollController = ScrollController()
      ..addListener(() {
        imageSize = initialSize - scrollController.offset;
        if (imageSize < 0) {
          imageSize = 0;}
        containerHeight = containerinitalHeight - scrollController.offset;
        if (containerHeight < 0) {
          containerHeight = 0;}
        imageOpacity = imageSize / initialSize;
        if (scrollController.offset > 224) {
          showTopBar = true;} else {
          showTopBar = false;}
        print(scrollController.offset);
        setState(() {});});
    _fetchRandomSongs();
    super.initState();}
  Future<void> _fetchRandomSongs() async {
    final List<Map<String, dynamic>> songs = await db.getSongs('suggested');
    setState(() {randomSongs = songs;});}
  @override
  Widget build(BuildContext context) {
    final cardSize = MediaQuery.of(context).size.width / 2 - 32;
    return Scaffold(body: Stack(
        children: [Container(
            height: containerHeight,
            width: MediaQuery.of(context).size.width,
            alignment: Alignment.center,
            color: Color.fromRGBO(0, 173, 181, 1.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,children: [
                Opacity(
                  opacity: imageOpacity.clamp(0, 1.0),
                  child: Container(
                    decoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(color:
                              Color.fromRGBO(34, 40, 49, 1.0).withOpacity(.5),
                          offset: Offset(0, 20),
                          blurRadius: 32,spreadRadius: 16,)],),
                    child: Image(
                      image: widget.image,
                      width: imageSize,
                      height: imageSize,
                      fit: BoxFit.cover,),),),
                SizedBox(height: 100,),],),),
          SafeArea(
            child: SingleChildScrollView(
              controller: scrollController,
              physics: BouncingScrollPhysics(),
              child: Column(children: [Container(
                    width: MediaQuery.of(context).size.width,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [
                          Color.fromRGBO(34, 40, 49, 1.0).withOpacity(0),
                          Color.fromRGBO(34, 40, 49, 1.0).withOpacity(0),
                          Color.fromRGBO(34, 40, 49, 1.0).withOpacity(1),
                          Color.fromRGBO(34, 40, 49, 1.0).withOpacity(1),
                        ],),),
                    child: Padding(
                      padding: const EdgeInsets.only(top: 22),
                      child: Column(children: [
                          SizedBox(height: initialSize + 32),
                          Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [Center(
                                  child: Text(widget.title,
                                      style: TextStyle(
                                          fontSize: 20,
                                          fontWeight: FontWeight.bold)),),
                                Center(child: Text(widget.artist,
                                      style: TextStyle(
                                          fontSize: 16, color: Colors.grey)),),
                                SizedBox(height: 8),
                                Text("1,888,132 likes",
                                  style: Theme.of(context).textTheme.bodyMedium,),
                                SizedBox(height: 8),
                                Stack(
                                  clipBehavior: Clip.none,
                                  children: [Row(children: [
                                        IconButton(
                                          icon: Icon(Icons.favorite),
                                          onPressed: () {
                                            print("Favorite button pressed");
                                            if (widget.playlists.isNotEmpty) {
                                              PlaylistUtils.choosePlaylist(
                                                  context,song,
                                                  widget.playlists);
                                            } else {showDialog(
                                                context: context,
                                                builder: (context) =>
                                                    AlertDialog(
                                                  title: Text('No playlists found'),
                                                  content: Text(
                                                      'There are no playlists available.'),
                                                  actions: <Widget>[
                                                    TextButton(
                                                      onPressed: () {
                                                        Navigator.of(context)
                                                            .pop();},
                                                      child: Text('OK'),),],),);} },),
                                        SizedBox(width: 16),IconButton(
                                          icon: Icon(Icons.more_horiz),
                                          onPressed: () {},),
                                        Spacer(),Container(
                                          decoration: BoxDecoration(
                                            shape: BoxShape.circle,
                                            color: Color.fromRGBO(
                                                238, 238, 238, 1.0),),
                                          child: IconButton(
                                            onPressed: () {
                                              Navigator.push(context,
                                                MaterialPageRoute(
                                                  builder: (context) =>
                                                      SongRunView(
                                                    title: widget.title,
                                                    artist: widget.artist,
                                                    image: widget.image,
                                                    songUrl: widget.song['file'],
                                                  ),),);},
                                            icon: Icon(Icons.play_arrow,
                                              color: Color.fromRGBO(
                                                  0, 173, 181, 1.0),
                                              size: 35,),),),],)],)],),)],),),),
                  Container(
                    padding: EdgeInsets.all(16),
                    color: Color.fromRGBO(34, 40, 49, 1.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [Text(
                            "Shape of You was released on January 6, 2017, as one of the lead singles from his third album ÷ (Divide). The melody of Shape of You is very catchy, telling about a romantic relationship with a focus on physical attraction."),
                        SizedBox(height: 16),
                        Text("You might also like",
                          style: Theme.of(context).textTheme.titleLarge,),
                        SizedBox(height: 16),
                        GridView.builder(
                          shrinkWrap: true,
                          physics: NeverScrollableScrollPhysics(),
                          gridDelegate:
                              SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 2,
                            crossAxisSpacing: 16,
                            childAspectRatio: 0.75,),
                          itemCount: randomSongs.length,
                          itemBuilder: (context, index) {
                            final song = randomSongs[index];
                            return AlbumCard(size: cardSize,
                              label: song['title'],
                              image: AssetImage(song['image']),
                              onTap: () {Navigator.push( context,
                                  MaterialPageRoute(
                                    builder: (context) => AlbumView(
                                      image: AssetImage(song['image']),
                                      title: song['title'],
                                      artist: song['artist'],song: song,
                                      playlists: widget.playlists,
                                    ),), ); },);},),],), )],),),),
          Positioned(child: Container(
              color: showTopBar
                  ? Color.fromRGBO(0, 173, 181, 1.0)
                  : Colors.transparent,
              padding: EdgeInsets.symmetric(
                horizontal: 16,
                vertical: 8,),
              child: SafeArea(
                child: Container(
                  height: 40,
                  width: MediaQuery.of(context).size.width,
                  child: Stack(
                    clipBehavior: Clip.none,
                    alignment: Alignment.center,
                    children: [ Positioned(left: 0,
                        child: GestureDetector(onTap: () {
                            Navigator.pop(context);},
                          child: Icon(
                            Icons.keyboard_arrow_left,
                            size: 38,), ),),
                      AnimatedOpacity(
                        duration: Duration(milliseconds: 250),
                        opacity: showTopBar ? 1 : 0,
                        child: Text(song['title'],
                          style: TextStyle(fontSize: 24,
                            fontWeight: FontWeight.bold, ),),),],)),),),)],),);}}
Đây là file Album_view

import 'package:flutter/material.dart';
import 'package:music_app_flutter/logic/models/songs.dart';
import 'package:music_app_flutter/logic/mysql.dart';
import 'package:music_app_flutter/views/library.dart';
import 'package:music_app_flutter/widgets/PlaylistUtils.dart';
import 'package:music_app_flutter/widgets/SongProvider.dart';
import 'package:provider/provider.dart';
class SearchView extends StatefulWidget {
  const SearchView({super.key});
  @override
  State<SearchView> createState() => _SearchViewState();}
class _SearchViewState extends State<SearchView> {
  final titleController = TextEditingController();
  List<Map<String, dynamic>> songs = [];
  bool isLoading = false;
  void searchSongs() async {
    setState(() {isLoading = true;});
    var db = Mysql();
    var results = await db.searchSongs(titleController.text);
    setState(() {songs = results;
      isLoading = false;});}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(children: [
              SizedBox(height: 30),
              const ListTile(title: Text(
                  "What do you want to listen to?",
                  style: TextStyle(fontSize: 40,
                    fontWeight: FontWeight.bold,
                    color: Color.fromRGBO(0, 173, 181, 1.0),), ),),
              Container(
                margin: EdgeInsets.all(8),padding:
                    const EdgeInsets.symmetric(horizontal: 18, vertical: 6),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(25),
                  color: const Color.fromRGBO(57, 62, 70, 1.0),),
                child: TextFormField(
                  controller: titleController,
                  decoration: const InputDecoration(
                    icon: Icon(Icons.search),
                    border: InputBorder.none,
                    hintText: "Type something",),
                  onFieldSubmitted: (value) {
                    searchSongs(); }, ),),
              isLoading
                  ? CircularProgressIndicator()
                  : Expanded(child: ListView.builder(
                        itemCount: songs.length,
                        itemBuilder: (context, index) {
                          var song = songs[index];
                          return SearchResult(song: song, playlists: playlists);
                        }, ),),],),),),);}}

class SearchResult extends StatelessWidget {
  final Map<String, dynamic> song;
  final List<String> playlists;
  const SearchResult({Key? key, required this.song, required this.playlists})
      : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Card(
      color: Color.fromRGBO(57, 62, 70, 1.0),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15),),
      margin: EdgeInsets.symmetric(vertical: 6),
      child: ListTile(
        leading: song['image'] != null
            ? Image.asset(song['image'],
                width: 60, height: 60, fit: BoxFit.cover)
            : Icon(Icons.music_note),
        title: Text(song['title'],
            style: TextStyle(color: Color.fromRGBO(238, 238, 238, 1.0))),
        subtitle: Text(song['artist'],
            style: TextStyle(color: Color.fromRGBO(238, 238, 238, 1.0))),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [IconButton(
              icon: Icon(Icons.favorite, color: Color.fromRGBO(238, 238, 238,1.0)),
              onPressed: () {
                PlaylistUtils.choosePlaylist(context, song, playlists); },),
            IconButton(icon:
                  Icon(Icons.play_arrow, color: Color.fromRGBO(238, 238, 238,1.0)), 
              onPressed: () {
                final selectedSong = Song(
                  title: song['title'],
                  artist: song['artist'],
                  image: song['image'],
                  views: song['views'],  );
                context.read<SongProvider>().playSong(selectedSong);  },  ), ],),
        onTap: () {
          print('Tapped on ${song['title']}');},),); }}
Đây là file Search.dart

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
class LibraryView extends StatefulWidget {
  @override
  _LibraryViewState createState() => _LibraryViewState();}
List<String> playlists = [];
class _LibraryViewState extends State<LibraryView> {
  String newPlaylistName = '';
  @override
  void initState() {
    super.initState();
    _loadPlaylists();}
  Future<void> _loadPlaylists() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      playlists = prefs.getStringList('playlists') ?? [];});
    print('Loaded playlists: $playlists'); // Check loaded playlists}
  Future<void> _savePlaylists() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList('playlists', playlists);}
  Future<void> _deletePlaylist(String playlistName) async {
    setState(() {
      playlists.remove(playlistName);});
    await _savePlaylists();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Playlist "$playlistName" has been deleted')),);}
  void _confirmDeletePlaylist(BuildContext context, String playlistName) {
    showDialog(context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Delete Playlist'),
          content: Text(
              'Are you sure you want to delete the playlist "$playlistName"?'),
          actions: <Widget>[
            ElevatedButton(
              child: Text('Cancel'),onPressed: () {
                Navigator.of(context).pop(); },),
            ElevatedButton(
              child: Text('Delete'),
              onPressed: () {
                _deletePlaylist(playlistName);
                Navigator.of(context).pop();
              },),],);},);}
  void _playPlaylist(String playlistName) {
    Navigator.push(context,
      MaterialPageRoute(
        builder: (context) => PlaylistSongsView(
          playlistName: playlistName,
          autoPlay: true,), ),);}
  @override
  Widget build(BuildContext context) {
    return Scaffold(body: Column(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [Container(
            padding: EdgeInsets.only(top: 60.0, right: 20.0, left: 20.0),
            child: Text(
              "What is your favorite playlist?",
              style: TextStyle( fontSize: 40,
                fontWeight: FontWeight.bold,
                color: Color.fromRGBO(0, 173, 181, 1.0), ), ),),
          Expanded( child: ListView(
              padding: EdgeInsets.all(16.0),
              children: [
                _buildSectionTitle('Playlists'),
                for (String playlistName in playlists)
                  _buildPlaylistItem(playlistName),
              ], ),),],),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Color.fromRGBO(0, 173, 181, 1.0),
        foregroundColor: Color.fromRGBO(238, 238, 238, 1.0),
        onPressed: () {
          _addPlaylist(context);},
        child: Icon(Icons.add),),);}
  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8.0),
      child: Text(title,
        style: TextStyle(
          fontSize: 18.0,
          fontWeight: FontWeight.bold, ),),);}
  Widget _buildPlaylistItem(String playlistName) {
    return Card(
      color: Color.fromRGBO(57, 62, 70, 1.0),
      elevation: 4.0,
      margin: EdgeInsets.symmetric(vertical: 4.0),
      child: ListTile(
        leading: Icon(Icons.queue_music),
        title: Text(playlistName),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [IconButton(
              icon: Icon(Icons.play_arrow),
              onPressed: () {
                _playPlaylist(playlistName);},),
            IconButton(icon: Icon(Icons.delete),
              onPressed: () {
                _confirmDeletePlaylist(context, playlistName);},),],),
        onTap: () {Navigator.push(context,
            MaterialPageRoute(builder: (context) =>
                  PlaylistSongsView(playlistName: playlistName),
            ),); },),);}
  void _addPlaylist(BuildContext context) {
    showDialog(context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Add Playlist'),
          content: TextField(
            onChanged: (value) {
              newPlaylistName = value;},
            decoration: InputDecoration(hintText: "Enter playlist name"),),
          actions: <Widget>[
            ElevatedButton(child: Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();},),
            ElevatedButton(child: Text('Add'),
              onPressed: () {
                _createPlaylist(newPlaylistName);
                Navigator.of(context).pop();
                _savePlaylists();}, ),],);},);}
  void _createPlaylist(String name) {
    if (name.isNotEmpty) { playlists.add(name);
      setState(() {}); }}}
class PlaylistSongsView extends StatefulWidget {
  final String playlistName;
  final bool autoPlay;
  PlaylistSongsView(
      {Key? key, required this.playlistName, this.autoPlay = false})
      : super(key: key);@override
  _PlaylistSongsViewState createState() => _PlaylistSongsViewState();}
class _PlaylistSongsViewState extends State<PlaylistSongsView> {
  int currentIndex = 0;
  List<Map<String, dynamic>> songs = [];
  Future<List<Map<String, dynamic>>> _loadPlaylistSongs() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> playlist = prefs.getStringList(widget.playlistName) ?? [];
    return playlist.map((song) {
      Map<String, dynamic> songMap;
      try { songMap = jsonDecode(song) as Map<String, dynamic>;
        songMap['views'] = songMap['views'] ?? 0;
      } catch (e) {
        songMap = {}; }return songMap;}).toList();}
  @override
  void initState() {
    super.initState();
    _loadPlaylistSongs().then((loadedSongs) {
      setState(() {
        songs = loadedSongs;
        if (widget.autoPlay && songs.isNotEmpty) {
          _showMusicPlayer(songs[currentIndex]); } });});}
  void _showMusicPlayer(Map<String, dynamic> song) {
    showModalBottomSheet(
      context: context,builder: (context) {
        return MusicPlayer(
          song: song,onNext: _nextSong,
          onPrevious: _previousSong, );},);}
  void _nextSong() {setState(() {
      if (currentIndex < songs.length - 1) {
        currentIndex++;
        _showMusicPlayer(songs[currentIndex]);}});}
  void _previousSong() { setState(() {
      if (currentIndex > 0) {
        currentIndex--;
        _showMusicPlayer(songs[currentIndex]);}});}
  void _deleteSong(int index) async {
    setState(() {songs.removeAt(index); });
    await _savePlaylistSongs();}
  Future<void> _savePlaylistSongs() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> playlist = songs.map((song) => jsonEncode(song)).toList();
    await prefs.setStringList(widget.playlistName, playlist);}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(
          widget.playlistName,
          style: TextStyle(fontSize: 25,
            fontWeight: FontWeight.bold,
            color: Colors.white,),),
        backgroundColor: Color.fromRGBO(0, 173, 181, 1.0),),
      body: Padding(
        padding: EdgeInsets.only(top: 8.0),
        child: songs.isEmpty
            ? Center(child: CircularProgressIndicator())
            : ListView.builder(
                itemCount: songs.length,
                itemBuilder: (context, index) {
                  var song = songs[index];
                  return Card(
                    color: Color.fromRGBO(57, 62, 70, 1.0),
                    elevation: 4.0,
                    margin:
                        EdgeInsets.symmetric(vertical: 5.0, horizontal: 15.0),
                    child: ListTile(
                      leading: song['image'] != null
                          ? Image.asset(
                              song['image'], width: 60, height: 60,
                              fit: BoxFit.cover,)
                          : Icon(Icons.music_note),
                      title: Text(song['title'] ?? ''),
                      subtitle: Text(song['artist'] ?? ''),
                      trailing: IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () {
                          _deleteSong(index);},),
                      onTap: () { setState(() {
                          currentIndex = index;});
                        _showMusicPlayer(song); },  ),);},),),);}}
class MusicPlayer extends StatelessWidget {
  final Map<String, dynamic> song;
  final VoidCallback onNext;
  final VoidCallback onPrevious;
  MusicPlayer({
    required this.song,
    required this.onNext,
    required this.onPrevious,});
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(8.0),
      child: Stack( children: [
          song['image'] != null
              ? Image.asset( song['image'],
                  width: double.infinity, height: 200,
                  fit: BoxFit.cover, )
              : Container(
                  width: double.infinity, height: 200,
                  color: Color.fromRGBO(238, 238, 238, 1.0),
                  child: Icon(  Icons.music_note,
                    color: Color.fromRGBO(238, 238, 238, 1.0),
                    size: 100,), ),
          Positioned.fill(child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Color.fromRGBO(34, 40, 49, 1.0).withOpacity(0.3),
                    Color.fromRGBO(34, 40, 49, 1.0).withOpacity(0.7),
                  ], ), ), ),),
          Positioned( bottom: 8.0,left: 8.0,
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [ ClipRRect(
                  borderRadius: BorderRadius.circular(4.0),
                  child: song['image'] != null
                      ? Image.asset(song['image'],
                          width: 60,height: 60,
                          fit: BoxFit.cover, )
                      : Container(
                          width: 60, height: 60,
                          color: Color.fromRGBO(238, 238, 238, 1.0),
                          child: Icon(Icons.music_note,
                            color: Color.fromRGBO(238, 238, 238, 1.0),
                          ), ), ),
                SizedBox(width: 8.0),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [Text(
                      song['title'] ?? '',
                      style: TextStyle(fontSize: 16.0,
                          fontWeight: FontWeight.bold,
                          color: Color.fromRGBO(238, 238, 238, 1.0)),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,),
                    SizedBox(height: 4.0),
                    Text( song['artist'] ?? '',
                      style: TextStyle( fontSize: 14.0,
                          color: Color.fromRGBO(238, 238, 238, 1.0)),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),], ), ], ),),
          Positioned.fill(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [ Padding(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 8.0, vertical: 16.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [ IconButton(
                        icon: Icon(Icons.skip_previous,
                            color: Color.fromRGBO(238, 238, 238, 1.0)),
                        onPressed: onPrevious,),
                      IconButton(
                        icon: Icon(Icons.play_arrow,
                            color: Color.fromRGBO(238, 238, 238, 1.0),size: 32),
                        onPressed: () {}, ), IconButton(
                        icon: Icon(Icons.skip_next,
                            color: Color.fromRGBO(238, 238, 238, 1.0)),
                        onPressed: onNext, ),],), ), ],),),
          Positioned(top: 8.0, right: 8.0,
            child: IconButton( icon:
                  Icon(Icons.close, color: Color.fromRGBO(238, 238, 238, 1.0)),
              onPressed: () {
                Navigator.of(context).pop(); },  ), ), ], ),);}}
Đây là file Library.dart để lưu các playlist

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class PlaylistUtils {
  static Future<void> addSongToPlaylist(
      String playlistName, Map<String, dynamic> song) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> playlist = prefs.getStringList(playlistName) ?? [];
    var songJson = jsonEncode(song.map((key, value) {
      if (value is DateTime) {
        return MapEntry(key, value.toIso8601String()); }
      return MapEntry(key, value); }));
    playlist.add(songJson);
    await prefs.setStringList(playlistName, playlist);}
  static void choosePlaylist(
      BuildContext context, Map<String, dynamic> song, List<String> playlists) {
    showDialog(context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Choose Playlist'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [for (String playlistName in playlists)
                ListTile(
                  title: Text(playlistName), onTap: () {
                    addSongToPlaylist(playlistName, song);
                    Navigator.of(context).pop();
                  },),], ), ); }, ); }}
Đây là file PlaylistUtil.dart

Tôi muốn khi ấn vào nút Favourite ở AlbumView thì sẽ xuất hiện các playlist đã lưu của tôi
